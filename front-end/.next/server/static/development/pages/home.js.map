{"version":3,"file":"static/development/pages/home.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/home/header.js","webpack:///./pages/home/index.js","webpack:///./pages/home/learn.js","webpack:///./pages/home/test.js","webpack:///./queries/getchar.gql","webpack:///./queries/listdata.gql","webpack:///./queries/quizdata.gql","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-apollo\"","webpack:///external \"react-canvas-draw\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CanvasDraw from \"react-canvas-draw\";\n\nconst Header = props => {\n\tconst {letterType,setLetterType}=props;\n\tconst handleAlphabets=()=>{\nsetLetterType(1);\n\t}\n\tconst handleDigits=()=>{\nsetLetterType(2);\n\t}\n\treturn(\n\t\t<div className=\"flex  mv3 justify-between f4\">\n\t\t\t<div className=\"\">Logo</div>\t\n\t\t\t<div className=\" flex br-pill ba b--prpl \">\n\t\t\t\t<span className={`br--right3 pv2 ph4 pointer fw6  ${props.type==='learn'?'bg-prpl white':'prpl'} `} data-type=\"learn\" onClick={props.handleType}>Learn</span>\n\t\t\t\t<span className={`br--left3 pv2 ph4 pointer fw6 ${props.type==='test'?'bg-prpl white':'prpl'} `} data-type=\"test\" onClick={props.handleType}>Test</span>\n\t\t\t</div>\t\n\t\t\t<div className=\"flex\">\n\t\t\t\t<span className={`br4 ba ph4 pv2 mr3 pointer fw6 b--prpl ${letterType===1?'bg-prpl white':'prpl'}`} onClick={handleAlphabets}>Alphabets</span>\n\t\t\t\t<span className={`br4 ba ph4 pv2 pointer fw6 b--prpl  ${letterType===2?'bg-prpl white':'prpl'}`} onClick={handleDigits}>Digit</span>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\nHeader.propTypes = {\nsetLetterType:PropTypes.func.isRequired,\nhandleType:PropTypes.func.isRequired,\n// letterType:PropTypes.int.isRequired,\n};\n\t\n\n\nexport default Header;\n","import React,{useState} from 'react';\nimport Learn from './learn';\nimport Test from './test';\nimport CanvasDraw from \"react-canvas-draw\";\n\nconst Home = props => {\n\t\n\tconst [type,setType]=useState('learn');\n\tconst handleType=(e)=>{\n\t\tconst {type}=e.currentTarget.dataset;\n\t\tsetType(type)\n\t}\n\n\nif(type==='test') return <Test handleType={handleType}/>;\nreturn <Learn handleType={handleType}/>;\n}\n\t\n\n\nexport default Home;\n","import React,{useRef,useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { Query } from 'react-apollo';\nimport listdata from '../../queries/listdata.gql';\nimport getchar from '../../queries/getchar.gql';\nimport  Header from './header';\nimport CanvasDraw from \"react-canvas-draw\";\n\nconst Learn = props => {\n\tconst canvasValue=useRef(null);\n\tconst [letter,setLetter]=useState(0)\n\tconst [image,setImage]=useState('')\n\tconst [letterType,setLetterType]=useState(1);\n\n\tconst onSpeak = e => {\n\t\tconst {text}=e.currentTarget.dataset;\n\t\tconst sp = new SpeechSynthesisUtterance(text.toLowerCase());\n\t\twindow.speechSynthesis.speak(sp);\n\t}\n\n\n\tconst handleClear=()=>{\n\t\tcanvasValue.current.clear();\n\t}\n\tconst handleUndo=()=>{\n\t\tcanvasValue.current.undo();\n\t}\n\tconst handleData=()=>{\n\t\tconsole.log(canvasValue.current.canvas.drawing.toDataURL(\"image/png\"));\n\t\tsetImage(canvasValue.current.canvas.drawing.toDataURL(\"image/png\"))\n\t\t// canvasValue.current\n\t}\n\tconst handleNext=()=>{\n\t\t\tsetImage(canvasValue.current.canvas.drawing.toDataURL(\"image/jpeg\"))\n\t\tif((letterType===1 && letter<26)||(letterType===2&&letter<100)) setLetter(letter+1);\n\t}\n\n\treturn(\n\t\t\n\t\t<div className=\"flex flex-grow-1 flex-column ph3\">\n\t\t<Header handleType={props.handleType} type=\"learn\" setLetterType={setLetterType} letterType={letterType}/>\n\t\t<div className=\"flex flex-grow-1 items-center mt4 ph4\">\n\t\t<div className=\"flex justify-between mv3 w-100\">\n\t\t\t\n\t\t\t\t<Query\n\t\t\tquery={listdata}\n\t\t\tvariables={{\n\t\t\toffset:letter,typeid:letterType,lang:\"en\"\n\t\t\t\t\n\t\t\t}}\n\t\t\tfetchPolicy=\"cache-and-network\"\n\t\t>\n\t\t\t{({ data,loading }) => {\n\t\t\t\tconst {getListData:{name}={}}=data||{};\n\t\t\t\treturn(<Query\n\t\t\t\t\tquery={getchar}\n\t\t\tskip={!image}\n\t\t\tvariables={{image}}\n\t\t\t\n\t\t\tfetchPolicy=\"cache-and-network\"\n\t\t>\n\t\t\t{({ data:charData }) => {\n\t\t\t\tconsole.log(charData);\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t<div className=\"flex flex-column items-center w-25\">\n\t\t\t\t<span className=\"b f4 mb3 prpl\">Digits </span>\n\t\t\t\t<span className=\"ba f-18 flex  items-center justify-center w-100 bg-ylw b--ylw prpl\">{name}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex flex-column items-center justify-center\">\n\t\t\t\t<button type=\"submit\" className=\" b b--black ba bn f4 mb3 ph4 pointer prpl pv2\" data-text={name} onClick={onSpeak}>Speak</button>\n\t\t\t\t<button type=\"submit\" className=\" b b--black ba bn f4 mb3 ph4 pointer prpl pv2\" onClick={handleData}>Test</button>\n\t\t\t</div>\n\t\t\t\t</>)\n\t\t\t\t}}\n\t\t\t\t\n\t\t\t\t</Query>)\n\t\t\t\t}}\n\t\t\t\t</Query>\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t<div className=\"flex flex-column items-center w-25\">\n\t\t\t\t<span className=\"flex mb3\"><span className=\"b f4 mr3 prpl\">Canvas Draw</span>\n\t\t\t\t<span className=\"f3\"> &#10003; &#10007;</span></span>\n\t\t\t\t<CanvasDraw style={{height:'20rem',width:\"100%\"}} brushColor=\"red\"  catenaryColor=\"green\" ref={canvasValue}/>\n\t\t\t\t<div className=\"flex mt3\">\n\t\t\t\t\t<span className=\"mr3 bn white fw6 ph3 pv2 pointer bg-pnk\" onClick={handleClear}>Clear</span>\n\t\t\t\t\t<span className=\" bn ph3 white fw6 pv2 pointer bg-pnk\" onClick={handleUndo}>Undo</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<button type=\"submit\" className=\"absolute b bn bg-prpl bottom-2 f4 flex items-center justify-center ph4 pv2 right-2 w-10 white pointer\" onClick={handleNext}>Next</button>\n\t\t</div>\t\n\t</div>)\n\t\t\t\t\n\t\t\t\n\t\t\n\t\n}\n\tLearn.propTypes={\n\t\thandleType:PropTypes.func.isRequired,\n\t}\n\n\nexport default Learn;\n","import React,{useRef,useState,useEffect} from 'react';\nimport { Query } from 'react-apollo';\n// import ReactCountdownClock from 'react-countdown-clock';\nimport Header from './header';\nimport getchar from '../../queries/getchar.gql';\nimport quizdata from '../../queries/quizdata.gql';\nimport PropTypes from 'prop-types';\nimport CanvasDraw from \"react-canvas-draw\";\n\n\nconst Timer=()=>{\n\tconst [time,setTime]=useState(15)\n\n\t\tconst interval=setInterval(()=>{\n\t\tsetTime(time-1);\n\t\t},[1000]);\n\n\n\tuseEffect(()=>{\n\t\t// if(time===0) clearInterval(interval)\t\n\t\tclearInterval(interval);\n\t\treturn ()=>{if(interval) clearInterval();}\n\t},[time])\n\t\n\tif(time===0) return null;\n\treturn(\n\t\t<div className=\"absolute b ba bg-prpl bn f1 ph4 prpl pv2 left-2 ylw\">{'00 : '+time}</div>\n\t\t)\n}\n\nconst Canvas=({data,letterType})=>{\nconst [image,setImage]=useState('')\n\tconst [letter,setLetter]=useState(-1)\n\tconst [resultSet,setResultSet]=useState([])\n\tconst canvasValue=useRef(null);\n\t\n\tuseEffect(()=>{\n\t\tif(letter===-1) return;\n\tonSpeak(data[letter].name);\n\t},[letter])\n\n\tconst onSpeak = val => {\n\t\tconst sp = new SpeechSynthesisUtterance(val.toLowerCase());\n\t\twindow.speechSynthesis.speak(sp);\n\t}\n\n\tconst handleClear=()=>{\n\t\tcanvasValue.current.clear();\n\t}\n\tconst handleUndo=()=>{\n\t\tcanvasValue.current.undo();\n\t}\n\t\n\tconst handleSkip=()=>{\n\t\tif(letter<26) setLetter(letter+1)\n\t\t\n\t}\n\tconst handleStart=()=>{\n\tsetLetter(0);\n\t}\t\n\tconst handleNext=()=>{\n\t\t\tsetImage(canvasValue.current.canvas.drawing.toDataURL(\"image/png\"))\n\t\t\t\tcanvasValue.current.clear();\n\t\t\tif((letterType===1 && letter<26)||(letterType===2&&letter<100)) setLetter(letter+1)\n\t}\n\treturn(\n\t\t<>\n<Query\n\t\t\t\t\tquery={getchar}\n\t\t\tskip={!image}\n\t\t\tvariables={{image}}\n\t\t\t\n\t\t\tfetchPolicy=\"cache-and-network\"\n\t\t>\n\t\t\t{({ data }) => {\n\t\t\t\tconsole.log(data);\n\t\t\t\treturn null\n\t\t\t\t}}\n\t\t\t</Query>\n<div className=\"flex flex-column w-100\">\n\n\t\t<div className=\"flex  mv3\">\t\t\t\n\t\t\t<div className=\"flex flex-column items-center w-25 center\">\n\t\t\t\t<span className=\"b f4 mb3 prpl\">Canvas Draw</span>\n\t\t\t\t<CanvasDraw style={{height:'16rem',width:\"100%\"}} brushColor=\"red\" ref={canvasValue}/>\n\t\t\t\t\n\t\t\t</div>\n\t\t\t{letter===-1?null:<Timer/>}\n\t\t\t\n\t\t</div>\n\t\t\n\t\t<div className=\"flex mv4 items-center justify-center\">\n\t\t\t\t{letter===-1?null:<button type=\"submit\" className=\" ph4 pv2  bg-pnk fw6 bn white mr3 pointer bn\" onClick={() => onSpeak(data[letter].name)}>Speak</button>}\n\t\t\t\t\n\t\t\t\t<span className=\"mr3 ba ph3 pv2 pointer fw6 bn bg-pnk white\" onClick={handleClear}>Clear</span>\n\t\t\t\t\t<span className=\" ba ph3 pv2 pointer bg-pnk fw6 bn white\" onClick={handleUndo}>Undo</span>\n\t\t</div>\n\t\t<div className=\"flex justify-between mt3\">\n\t\t\t\n\t\t\t{letter===-1?<button type=\"submit\" className=\"b bn bg-prpl  f4 flex items-center justify-center ph4 pv2  w-20 white pointer\" onClick={handleStart}>Start Test</button>:<><button type=\"submit\" className=\"b bn bg-prpl  f4 flex items-center justify-center ph4 pv2  w-20 white pointer\" onClick={handleNext}>Submit Test</button>\n\t\t\t\n\t\t\t<button type=\"submit\" className=\"b bn bg-prpl  f4 flex items-center justify-center ph4 pv2  w-20 white pointer\" onClick={handleSkip}>Skip</button>\n<button type=\"submit\" className=\"b bn bg-prpl  f4 flex items-center justify-center ph4 pv2  w-20 white pointer\" onClick={handleNext}>Next</button>\n\t\t</>}\n\n\t\t</div>\n\n\t</div>\n\t</>\n\t\t)\n}\nCanvas.propTypes={\n\tdata:PropTypes.array.isRequired,\n}\n\n\nconst Test = props => {\n\tconst [letterType,setLetterType]=useState(1);\n\treturn(\n\t<div className=\"flex flex-grow-1 flex-column ph3\">\n\t<Header handleType={props.handleType} type=\"test\" setLetterType={setLetterType} letterType={letterType}/>\n\t\t<div className=\"flex flex-grow-1 items-center mt4 ph4\">\n\t\t\t\t<Query\n\t\t\tquery={quizdata}\n\t\t\tvariables={{\n\t\t\ttypeid:letterType,lang:\"en\"\n\t\t\t\t\n\t\t\t}}\n\t\t\tfetchPolicy=\"cache-and-network\"\n\t\t>\n\t\t\t{({ data,loading }) => {\n\t\t\t\t\n\t\t\t\tconst {getQuizData}=data||{};\n\t\t\t\tif(!getQuizData|| getQuizData.length===0) return null;\n\t\t\t\treturn <Canvas data={getQuizData} letterType={letterType}/>\n\t}}\n\t</Query>\t\n\t\t\n\t\t\n\t\t</div>\t\n\t</div>\n\t)\n}\n\tTest.propTypes={\n\t\thandleType:PropTypes.func.isRequired,\n\t}\n\n\nexport default Test;\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getchar\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"image\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"getCharacter\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"image\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"image\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"character\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":80}};\n    doc.loc.source = {\"body\":\"query getchar($image:String!){\\n  getCharacter(image:$image){\\n    character\\n  }\\n}\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"getchar\"] = oneQuery(doc, \"getchar\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"listdata\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"offset\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"typeid\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}},\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"lang\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"getListData\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"offset\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"offset\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"typeid\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"typeid\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"lang\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"lang\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"images\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"lang\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":158}};\n    doc.loc.source = {\"body\":\"query listdata($offset:Int,$typeid:ID!,$lang:String){\\n  getListData(offset:$offset,typeid:$typeid,lang:$lang){\\n    id\\n    name\\n    images\\n    lang\\n   \\n  }\\n}\\n\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"listdata\"] = oneQuery(doc, \"listdata\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"quizdata\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"typeid\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}},\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"lang\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"getQuizData\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"typeid\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"typeid\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"lang\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"lang\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"images\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"lang\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":131}};\n    doc.loc.source = {\"body\":\"query quizdata($typeid:ID!,$lang:String){\\n  getQuizData(typeid:$typeid,lang:$lang){\\n    id\\n    name\\n    images\\n    lang\\n   \\n  }\\n}\\n\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"quizdata\"] = oneQuery(doc, \"quizdata\");\n        \n","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");","module.exports = require(\"react-canvas-draw\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAQA;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AADA;AAIA;AANA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AALA;AAOA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAGA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AADA;AAKA;;;;;;;;;;;;ACzGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AALA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AADA;AAIA;AANA;AAQA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AACA;AADA;AAKA;;;;;;;;;;;ACpzzzHA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}