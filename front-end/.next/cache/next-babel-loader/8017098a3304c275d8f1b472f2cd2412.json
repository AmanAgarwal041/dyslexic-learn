{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloClient from './index';\nvar apolloClient = null;\n\nfunction initApolloClient(initialState, context) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return createApolloClient(initialState, context);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState, context);\n  }\n\n  return apolloClient;\n}\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2, b) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        rest = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = useMemo(function () {\n      return apolloClient || initApolloClient(apolloState);\n    }, []);\n    return React.createElement(ApolloProvider, {\n      client: client\n    }, React.createElement(PageComponent, rest));\n  }; // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(context) {\n        var AppTree, apolloClient, pageProps, _ref4, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = context.AppTree; // Initialize ApolloClient, add it to the context object so\n                // we can use it in `PageComponent.getInitialProp`.\n\n                apolloClient = context.apolloClient = initApolloClient(undefined, context.ctx); // Run wrapped getInitialProps methods\n\n                pageProps = {};\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return PageComponent.getInitialProps(context);\n\n              case 6:\n                pageProps = _context.sent;\n\n              case 7:\n                if (!(typeof window === 'undefined')) {\n                  _context.next = 24;\n                  break;\n                }\n\n                if (!(context.res && context.res.finished)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", pageProps);\n\n              case 10:\n                if (!ssr) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.prev = 11;\n                _context.next = 14;\n                return import('@apollo/react-ssr');\n\n              case 14:\n                _ref4 = _context.sent;\n                getDataFromTree = _ref4.getDataFromTree;\n                _context.next = 18;\n                return getDataFromTree(React.createElement(AppTree, {\n                  pageProps: pageProps,\n                  apolloClient: apolloClient\n                }));\n\n              case 18:\n                _context.next = 23;\n                break;\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](11);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error('Error while running `getDataFromTree`', _context.t0);\n\n              case 23:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 24:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                  apolloState: apolloState\n                }));\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[11, 20]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\n;","map":{"version":3,"sources":["/Users/admin/hackathon-project/dyslexic-learn/front-end/apollo/with-data.js"],"names":["React","useMemo","Head","ApolloProvider","createApolloClient","apolloClient","initApolloClient","initialState","context","process","browser","withApollo","PageComponent","ssr","WithApollo","b","apolloState","rest","client","env","NODE_ENV","displayName","name","console","warn","getInitialProps","AppTree","undefined","ctx","pageProps","window","res","finished","getDataFromTree","error","rewind","cache","extract"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloClient from './index';\n\nlet apolloClient = null;\n\nfunction initApolloClient (initialState, context) {\n\t// Make sure to create a new client for every server-side request so that data\n\t// isn't shared between connections (which would be bad)\n\tif (!process.browser) {\n\t\treturn createApolloClient(initialState, context);\n\t}\n\n\t// Reuse client on the client-side\n\tif (!apolloClient) {\n\t\tapolloClient = createApolloClient(initialState, context);\n\t}\n\n\treturn apolloClient\n}\n\nexport function withApollo (PageComponent, { ssr = true } = {}) {\n\tconst WithApollo = ({ apolloClient, apolloState,  ...rest }, b) => {\n\t\tconst client = useMemo(\n\t\t\t() => apolloClient || initApolloClient(apolloState),\n\t\t\t[]\n\t\t);\n\n\t\treturn (\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<PageComponent {...rest} />\n\t\t\t</ApolloProvider>\n\t\t)\n\t}\n\n\t// Set the correct displayName in development\n\tif (process.env.NODE_ENV !== 'production') {\n\t\tconst displayName =\n\t\t\tPageComponent.displayName || PageComponent.name || 'Component'\n\n\t\tif (displayName === 'App') {\n\t\t\tconsole.warn('This withApollo HOC only works with PageComponents.')\n\t\t}\n\n\t\tWithApollo.displayName = `withApollo(${displayName})`\n\t}\n\n\tif (ssr || PageComponent.getInitialProps) {\n\t\tWithApollo.getInitialProps = async context => {\n\t\t\tconst { AppTree } = context;\n\n\t\t\t// Initialize ApolloClient, add it to the context object so\n\t\t\t// we can use it in `PageComponent.getInitialProp`.\n\t\t\tconst apolloClient = (context.apolloClient = initApolloClient(undefined, context.ctx));\n\n\t\t\t// Run wrapped getInitialProps methods\n\t\t\tlet pageProps = {};\n\t\t\tif (PageComponent.getInitialProps) {\n\t\t\t\tpageProps = await PageComponent.getInitialProps(context);\n\t\t\t}\n\n\t\t\t// Only on the server:\n\t\t\tif (typeof window === 'undefined') {\n\t\t\t\t// When redirecting, the response is finished.\n\t\t\t\t// No point in continuing to render\n\t\t\t\tif (context.res && context.res.finished) {\n\t\t\t\t\treturn pageProps;\n\t\t\t\t}\n\n\t\t\t\t// Only if ssr is enabled\n\t\t\t\tif (ssr) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Run all GraphQL queries\n\t\t\t\t\t\tconst { getDataFromTree } = await import('@apollo/react-ssr');\n\t\t\t\t\t\tawait getDataFromTree(\n\t\t\t\t\t\t\t<AppTree\n\t\t\t\t\t\t\t\tpageProps={pageProps}\n\t\t\t\t\t\t\t\tapolloClient={apolloClient}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\n\t\t\t\t\t\t// Handle them in components via the data.error prop:\n\t\t\t\t\t\t// https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n\t\t\t\t\t\tconsole.error('Error while running `getDataFromTree`', error);\n\t\t\t\t\t}\n\n\t\t\t\t\t// getDataFromTree does not call componentWillUnmount\n\t\t\t\t\t// head side effect therefore need to be cleared manually\n\t\t\t\t\tHead.rewind();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Extract query data from the Apollo store\n\t\t\tconst apolloState = apolloClient.cache.extract();\n\n\t\t\treturn {\n\t\t\t\t...pageProps,\n\t\t\t\tapolloState\n\t\t\t};\n\t\t}\n\t}\n\n\treturn WithApollo;\n};"]},"metadata":{},"sourceType":"module"}