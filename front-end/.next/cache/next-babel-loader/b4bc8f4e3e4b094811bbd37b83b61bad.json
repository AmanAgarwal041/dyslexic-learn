{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/objectSpread\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _ramda = require(\"ramda\");\n\nvar _apolloClient = require(\"apollo-client\");\n\nvar _apolloCacheInmemory = require(\"apollo-cache-inmemory\");\n\nvar _apolloLinkHttp = require(\"apollo-link-http\");\n\nvar _apolloLinkError = require(\"apollo-link-error\");\n\nvar _apolloLink = require(\"apollo-link\");\n\nvar _isomorphicUnfetch = _interopRequireDefault(require(\"isomorphic-unfetch\"));\n\nvar _config = _interopRequireDefault(require(\"../config\"));\n\nconst cache = (initialState = {}) => new _apolloCacheInmemory.InMemoryCache().restore(initialState);\n\nconst requestLink = new _apolloLink.ApolloLink((operation, forward) => new _apolloLink.Observable(observer => {\n  let handle;\n\n  _promise.default.resolve(operation).then(() => {\n    handle = forward(operation).subscribe({\n      next: observer.next.bind(observer),\n      error: observer.error.bind(observer),\n      complete: observer.complete.bind(observer)\n    });\n  }).catch(observer.error.bind(observer));\n\n  return () => {\n    if (handle) handle.unsubscribe();\n  };\n}));\n\nmodule.exports = (initialState, {\n  req: {\n    headers = {}\n  } = {}\n} = {}) => {\n  headers.devicetype = 'ogma';\n  let omittedHeaders = (0, _ramda.omit)(['cf-ray', 'cf-connecting-ip', 'upgrade-insecure-requests', 'accept', 'host'])(headers);\n\n  if (_config.default.graph.authorizationHeader) {\n    omittedHeaders = (0, _objectSpread2.default)({}, omittedHeaders, {\n      authorization: _config.default.graph.authorizationHeader\n    });\n  }\n\n  return new _apolloClient.ApolloClient({\n    ssrMode: true,\n    link: _apolloLink.ApolloLink.from([(0, _apolloLinkError.onError)(({\n      graphQLErrors,\n      networkError\n    }) => {\n      if (graphQLErrors) graphQLErrors.forEach(({\n        message,\n        locations,\n        path\n      }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }), requestLink, new _apolloLinkHttp.HttpLink({\n      uri: _config.default.graph.url,\n      credentials: 'include',\n      headers: omittedHeaders,\n      fetch: _isomorphicUnfetch.default\n    })]),\n    cache: cache(initialState)\n  });\n};","map":{"version":3,"sources":["/Users/admin/hackathon-project/dyslexic-learn/front-end/apollo/index.js"],"names":["cache","initialState","InMemoryCache","restore","requestLink","ApolloLink","operation","forward","Observable","observer","handle","resolve","then","subscribe","next","bind","error","complete","catch","unsubscribe","module","exports","req","headers","devicetype","omittedHeaders","config","graph","authorizationHeader","authorization","ApolloClient","ssrMode","link","from","graphQLErrors","networkError","forEach","message","locations","path","console","log","HttpLink","uri","url","credentials","fetch"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,KAAK,GAAG,CAACC,YAAY,GAAG,EAAhB,KAAuB,IAAIC,kCAAJ,GAAoBC,OAApB,CAA4BF,YAA5B,CAArC;;AAEA,MAAMG,WAAW,GAAG,IAAIC,sBAAJ,CAAe,CAACC,SAAD,EAAYC,OAAZ,KAClC,IAAIC,sBAAJ,CAAeC,QAAQ,IAAI;AAC1B,MAAIC,MAAJ;;AACA,mBAAQC,OAAR,CAAgBL,SAAhB,EACEM,IADF,CACO,MAAM;AACXF,IAAAA,MAAM,GAAGH,OAAO,CAACD,SAAD,CAAP,CAAmBO,SAAnB,CAA6B;AACrCC,MAAAA,IAAI,EAAEL,QAAQ,CAACK,IAAT,CAAcC,IAAd,CAAmBN,QAAnB,CAD+B;AAErCO,MAAAA,KAAK,EAAEP,QAAQ,CAACO,KAAT,CAAeD,IAAf,CAAoBN,QAApB,CAF8B;AAGrCQ,MAAAA,QAAQ,EAAER,QAAQ,CAACQ,QAAT,CAAkBF,IAAlB,CAAuBN,QAAvB;AAH2B,KAA7B,CAAT;AAKA,GAPF,EAQES,KARF,CAQQT,QAAQ,CAACO,KAAT,CAAeD,IAAf,CAAoBN,QAApB,CARR;;AAUA,SAAO,MAAM;AACZ,QAAIC,MAAJ,EAAYA,MAAM,CAACS,WAAP;AACZ,GAFD;AAGA,CAfD,CADmB,CAApB;;AAmBAC,MAAM,CAACC,OAAP,GAAiB,CAACpB,YAAD,EAAe;AAAEqB,EAAAA,GAAG,EAAE;AAAEC,IAAAA,OAAO,GAAG;AAAZ,MAAmB;AAA1B,IAAiC,EAAhD,KAAuD;AACvEA,EAAAA,OAAO,CAACC,UAAR,GAAqB,MAArB;AAEA,MAAIC,cAAc,GAAG,iBAAK,CACzB,QADyB,EAEzB,kBAFyB,EAGzB,2BAHyB,EAIzB,QAJyB,EAKzB,MALyB,CAAL,EAMlBF,OANkB,CAArB;;AAQA,MAAIG,gBAAOC,KAAP,CAAaC,mBAAjB,EAAsC;AACrCH,IAAAA,cAAc,mCACVA,cADU;AAEbI,MAAAA,aAAa,EAAEH,gBAAOC,KAAP,CAAaC;AAFf,MAAd;AAIA;;AAED,SAAO,IAAIE,0BAAJ,CAAiB;AACvBC,IAAAA,OAAO,EAAE,IADc;AAEvBC,IAAAA,IAAI,EAAE3B,uBAAW4B,IAAX,CAAgB,CACrB,8BAAQ,CAAC;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAD,KAAqC;AAC5C,UAAID,aAAJ,EACCA,aAAa,CAACE,OAAd,CAAsB,CAAC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA;AAAtB,OAAD,KACrBC,OAAO,CAACC,GAAR,CACE,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD7E,CADD;AAMD,UAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,CAAa,oBAAmBN,YAAa,EAA7C;AAClB,KATD,CADqB,EAWrB/B,WAXqB,EAYrB,IAAIsC,wBAAJ,CAAa;AACZC,MAAAA,GAAG,EAAEjB,gBAAOC,KAAP,CAAaiB,GADN;AAEZC,MAAAA,WAAW,EAAE,SAFD;AAGZtB,MAAAA,OAAO,EAAEE,cAHG;AAIZqB,MAAAA,KAAK,EAALA;AAJY,KAAb,CAZqB,CAAhB,CAFiB;AAqBvB9C,IAAAA,KAAK,EAAEA,KAAK,CAACC,YAAD;AArBW,GAAjB,CAAP;AAuBA,CAzCD","sourcesContent":["import { omit } from 'ramda';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport fetch from 'isomorphic-unfetch';\nimport config from '../config';\n\nconst cache = (initialState = {}) => new InMemoryCache().restore(initialState);\n\nconst requestLink = new ApolloLink((operation, forward) =>\n\tnew Observable(observer => {\n\t\tlet handle;\n\t\tPromise.resolve(operation)\n\t\t\t.then(() => {\n\t\t\t\thandle = forward(operation).subscribe({\n\t\t\t\t\tnext: observer.next.bind(observer),\n\t\t\t\t\terror: observer.error.bind(observer),\n\t\t\t\t\tcomplete: observer.complete.bind(observer),\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(observer.error.bind(observer));\n\n\t\treturn () => {\n\t\t\tif (handle) handle.unsubscribe();\n\t\t};\n\t})\n);\n\nmodule.exports = (initialState, { req: { headers = {} } = {} } = {}) => {\n\theaders.devicetype = 'ogma';\n\n\tlet omittedHeaders = omit([\n\t\t'cf-ray',\n\t\t'cf-connecting-ip',\n\t\t'upgrade-insecure-requests',\n\t\t'accept',\n\t\t'host',\n\t])(headers);\n\n\tif (config.graph.authorizationHeader) {\n\t\tomittedHeaders = {\n\t\t\t...omittedHeaders,\n\t\t\tauthorization: config.graph.authorizationHeader,\n\t\t};\n\t}\n\t\n\treturn new ApolloClient({\n\t\tssrMode: true,\n\t\tlink: ApolloLink.from([\n\t\t\tonError(({ graphQLErrors, networkError }) => {\n\t\t\t\tif (graphQLErrors)\n\t\t\t\t\tgraphQLErrors.forEach(({ message, locations, path }) =>\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tif (networkError) console.log(`[Network error]: ${networkError}`);\n\t\t\t}),\n\t\t\trequestLink,\n\t\t\tnew HttpLink({\n\t\t\t\turi: config.graph.url,\n\t\t\t\tcredentials: 'include',\n\t\t\t\theaders: omittedHeaders,\n\t\t\t\tfetch,\n\t\t\t})\n\t\t]),\n\t\tcache: cache(initialState)\n\t});\n};"]},"metadata":{},"sourceType":"script"}