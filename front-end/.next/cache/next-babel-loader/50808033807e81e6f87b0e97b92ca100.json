{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloClient from './index';\nlet apolloClient = null;\n\nfunction initApolloClient(initialState, context) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return createApolloClient(initialState, context);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState, context);\n  }\n\n  return apolloClient;\n}\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref, b) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = useMemo(() => apolloClient || initApolloClient(apolloState), []);\n    return React.createElement(ApolloProvider, {\n      client: client\n    }, React.createElement(PageComponent, rest));\n  }; // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async context => {\n      const {\n        AppTree\n      } = context; // Initialize ApolloClient, add it to the context object so\n      // we can use it in `PageComponent.getInitialProp`.\n\n      const apolloClient = context.apolloClient = initApolloClient(undefined, context.ctx); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(context);\n      } // Only on the server:\n\n\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (context.res && context.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree(React.createElement(AppTree, {\n              pageProps: pageProps,\n              apolloClient: apolloClient\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n;","map":{"version":3,"sources":["/Users/admin/hackathon-project/dyslexic-learn/front-end/apollo/with-data.js"],"names":["React","useMemo","Head","ApolloProvider","createApolloClient","apolloClient","initApolloClient","initialState","context","process","browser","withApollo","PageComponent","ssr","WithApollo","b","apolloState","rest","client","env","NODE_ENV","displayName","name","console","warn","getInitialProps","AppTree","undefined","ctx","pageProps","window","res","finished","getDataFromTree","error","rewind","cache","extract"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloClient from './index';\n\nlet apolloClient = null;\n\nfunction initApolloClient (initialState, context) {\n\t// Make sure to create a new client for every server-side request so that data\n\t// isn't shared between connections (which would be bad)\n\tif (!process.browser) {\n\t\treturn createApolloClient(initialState, context);\n\t}\n\n\t// Reuse client on the client-side\n\tif (!apolloClient) {\n\t\tapolloClient = createApolloClient(initialState, context);\n\t}\n\n\treturn apolloClient\n}\n\nexport function withApollo (PageComponent, { ssr = true } = {}) {\n\tconst WithApollo = ({ apolloClient, apolloState,  ...rest }, b) => {\n\t\tconst client = useMemo(\n\t\t\t() => apolloClient || initApolloClient(apolloState),\n\t\t\t[]\n\t\t);\n\n\t\treturn (\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<PageComponent {...rest} />\n\t\t\t</ApolloProvider>\n\t\t)\n\t}\n\n\t// Set the correct displayName in development\n\tif (process.env.NODE_ENV !== 'production') {\n\t\tconst displayName =\n\t\t\tPageComponent.displayName || PageComponent.name || 'Component'\n\n\t\tif (displayName === 'App') {\n\t\t\tconsole.warn('This withApollo HOC only works with PageComponents.')\n\t\t}\n\n\t\tWithApollo.displayName = `withApollo(${displayName})`\n\t}\n\n\tif (ssr || PageComponent.getInitialProps) {\n\t\tWithApollo.getInitialProps = async context => {\n\t\t\tconst { AppTree } = context;\n\n\t\t\t// Initialize ApolloClient, add it to the context object so\n\t\t\t// we can use it in `PageComponent.getInitialProp`.\n\t\t\tconst apolloClient = (context.apolloClient = initApolloClient(undefined, context.ctx));\n\n\t\t\t// Run wrapped getInitialProps methods\n\t\t\tlet pageProps = {};\n\t\t\tif (PageComponent.getInitialProps) {\n\t\t\t\tpageProps = await PageComponent.getInitialProps(context);\n\t\t\t}\n\n\t\t\t// Only on the server:\n\t\t\tif (typeof window === 'undefined') {\n\t\t\t\t// When redirecting, the response is finished.\n\t\t\t\t// No point in continuing to render\n\t\t\t\tif (context.res && context.res.finished) {\n\t\t\t\t\treturn pageProps;\n\t\t\t\t}\n\n\t\t\t\t// Only if ssr is enabled\n\t\t\t\tif (ssr) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Run all GraphQL queries\n\t\t\t\t\t\tconst { getDataFromTree } = await import('@apollo/react-ssr');\n\t\t\t\t\t\tawait getDataFromTree(\n\t\t\t\t\t\t\t<AppTree\n\t\t\t\t\t\t\t\tpageProps={pageProps}\n\t\t\t\t\t\t\t\tapolloClient={apolloClient}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// Prevent Apollo Client GraphQL errors from crashing SSR.\n\t\t\t\t\t\t// Handle them in components via the data.error prop:\n\t\t\t\t\t\t// https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n\t\t\t\t\t\tconsole.error('Error while running `getDataFromTree`', error);\n\t\t\t\t\t}\n\n\t\t\t\t\t// getDataFromTree does not call componentWillUnmount\n\t\t\t\t\t// head side effect therefore need to be cleared manually\n\t\t\t\t\tHead.rewind();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Extract query data from the Apollo store\n\t\t\tconst apolloState = apolloClient.cache.extract();\n\n\t\t\treturn {\n\t\t\t\t...pageProps,\n\t\t\t\tapolloState\n\t\t\t};\n\t\t}\n\t}\n\n\treturn WithApollo;\n};"]},"metadata":{},"sourceType":"module"}